// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Assign extends ethereum.Event {
  get params(): Assign__Params {
    return new Assign__Params(this);
  }
}

export class Assign__Params {
  _event: Assign;

  constructor(event: Assign) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get LREIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LRETransfer extends ethereum.Event {
  get params(): LRETransfer__Params {
    return new LRETransfer__Params(this);
  }
}

export class LRETransfer__Params {
  _event: LRETransfer;

  constructor(event: LRETransfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get LREIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LREOffered extends ethereum.Event {
  get params(): LREOffered__Params {
    return new LREOffered__Params(this);
  }
}

export class LREOffered__Params {
  _event: LREOffered;

  constructor(event: LREOffered) {
    this._event = event;
  }

  get LREIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get toAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LREBidEntered extends ethereum.Event {
  get params(): LREBidEntered__Params {
    return new LREBidEntered__Params(this);
  }
}

export class LREBidEntered__Params {
  _event: LREBidEntered;

  constructor(event: LREBidEntered) {
    this._event = event;
  }

  get LREIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fromAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LREBidWithdrawn extends ethereum.Event {
  get params(): LREBidWithdrawn__Params {
    return new LREBidWithdrawn__Params(this);
  }
}

export class LREBidWithdrawn__Params {
  _event: LREBidWithdrawn;

  constructor(event: LREBidWithdrawn) {
    this._event = event;
  }

  get LREIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fromAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LREBought extends ethereum.Event {
  get params(): LREBought__Params {
    return new LREBought__Params(this);
  }
}

export class LREBought__Params {
  _event: LREBought;

  constructor(event: LREBought) {
    this._event = event;
  }

  get LREIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fromAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get toAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class LRENoLongerForSale extends ethereum.Event {
  get params(): LRENoLongerForSale__Params {
    return new LRENoLongerForSale__Params(this);
  }
}

export class LRENoLongerForSale__Params {
  _event: LRENoLongerForSale;

  constructor(event: LRENoLongerForSale) {
    this._event = event;
  }

  get LREIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LooksRareExchange__LREsOfferedForSaleResult {
  value0: boolean;
  value1: BigInt;
  value2: Address;
  value3: BigInt;
  value4: Address;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: Address,
    value3: BigInt,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }

  getIsForSale(): boolean {
    return this.value0;
  }

  getLREIndex(): BigInt {
    return this.value1;
  }

  getSeller(): Address {
    return this.value2;
  }

  getMinValue(): BigInt {
    return this.value3;
  }

  getOnlySellTo(): Address {
    return this.value4;
  }
}

export class LooksRareExchange__LREBidsResult {
  value0: boolean;
  value1: BigInt;
  value2: Address;
  value3: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: Address,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getHasBid(): boolean {
    return this.value0;
  }

  getLREIndex(): BigInt {
    return this.value1;
  }

  getBidder(): Address {
    return this.value2;
  }

  getValue(): BigInt {
    return this.value3;
  }
}

export class LooksRareExchange extends ethereum.SmartContract {
  static bind(address: Address): LooksRareExchange {
    return new LooksRareExchange("LooksRareExchange", address);
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  LREsOfferedForSale(
    param0: BigInt
  ): LooksRareExchange__LREsOfferedForSaleResult {
    let result = super.call(
      "LREsOfferedForSale",
      "LREsOfferedForSale(uint256):(bool,uint256,address,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new LooksRareExchange__LREsOfferedForSaleResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toAddress()
    );
  }

  try_LREsOfferedForSale(
    param0: BigInt
  ): ethereum.CallResult<LooksRareExchange__LREsOfferedForSaleResult> {
    let result = super.tryCall(
      "LREsOfferedForSale",
      "LREsOfferedForSale(uint256):(bool,uint256,address,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LooksRareExchange__LREsOfferedForSaleResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toAddress()
      )
    );
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  imageHash(): string {
    let result = super.call("imageHash", "imageHash():(string)", []);

    return result[0].toString();
  }

  try_imageHash(): ethereum.CallResult<string> {
    let result = super.tryCall("imageHash", "imageHash():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextLREIndexToAssign(): BigInt {
    let result = super.call(
      "nextLREIndexToAssign",
      "nextLREIndexToAssign():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextLREIndexToAssign(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextLREIndexToAssign",
      "nextLREIndexToAssign():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LREIndexToAddress(param0: BigInt): Address {
    let result = super.call(
      "LREIndexToAddress",
      "LREIndexToAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_LREIndexToAddress(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "LREIndexToAddress",
      "LREIndexToAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  standard(): string {
    let result = super.call("standard", "standard():(string)", []);

    return result[0].toString();
  }

  try_standard(): ethereum.CallResult<string> {
    let result = super.tryCall("standard", "standard():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  LREBids(param0: BigInt): LooksRareExchange__LREBidsResult {
    let result = super.call(
      "LREBids",
      "LREBids(uint256):(bool,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new LooksRareExchange__LREBidsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_LREBids(
    param0: BigInt
  ): ethereum.CallResult<LooksRareExchange__LREBidsResult> {
    let result = super.tryCall(
      "LREBids",
      "LREBids(uint256):(bool,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LooksRareExchange__LREBidsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allLREsAssigned(): boolean {
    let result = super.call("allLREsAssigned", "allLREsAssigned():(bool)", []);

    return result[0].toBoolean();
  }

  try_allLREsAssigned(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allLREsAssigned",
      "allLREsAssigned():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  LREsRemainingToAssign(): BigInt {
    let result = super.call(
      "LREsRemainingToAssign",
      "LREsRemainingToAssign():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_LREsRemainingToAssign(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LREsRemainingToAssign",
      "LREsRemainingToAssign():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingWithdrawals(param0: Address): BigInt {
    let result = super.call(
      "pendingWithdrawals",
      "pendingWithdrawals(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_pendingWithdrawals(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingWithdrawals",
      "pendingWithdrawals(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class EnterBidForLRECall extends ethereum.Call {
  get inputs(): EnterBidForLRECall__Inputs {
    return new EnterBidForLRECall__Inputs(this);
  }

  get outputs(): EnterBidForLRECall__Outputs {
    return new EnterBidForLRECall__Outputs(this);
  }
}

export class EnterBidForLRECall__Inputs {
  _call: EnterBidForLRECall;

  constructor(call: EnterBidForLRECall) {
    this._call = call;
  }

  get LREIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EnterBidForLRECall__Outputs {
  _call: EnterBidForLRECall;

  constructor(call: EnterBidForLRECall) {
    this._call = call;
  }
}

export class AcceptBidForLRECall extends ethereum.Call {
  get inputs(): AcceptBidForLRECall__Inputs {
    return new AcceptBidForLRECall__Inputs(this);
  }

  get outputs(): AcceptBidForLRECall__Outputs {
    return new AcceptBidForLRECall__Outputs(this);
  }
}

export class AcceptBidForLRECall__Inputs {
  _call: AcceptBidForLRECall;

  constructor(call: AcceptBidForLRECall) {
    this._call = call;
  }

  get LREIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AcceptBidForLRECall__Outputs {
  _call: AcceptBidForLRECall;

  constructor(call: AcceptBidForLRECall) {
    this._call = call;
  }
}

export class SetInitialOwnersCall extends ethereum.Call {
  get inputs(): SetInitialOwnersCall__Inputs {
    return new SetInitialOwnersCall__Inputs(this);
  }

  get outputs(): SetInitialOwnersCall__Outputs {
    return new SetInitialOwnersCall__Outputs(this);
  }
}

export class SetInitialOwnersCall__Inputs {
  _call: SetInitialOwnersCall;

  constructor(call: SetInitialOwnersCall) {
    this._call = call;
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get indices(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetInitialOwnersCall__Outputs {
  _call: SetInitialOwnersCall;

  constructor(call: SetInitialOwnersCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class AllInitialOwnersAssignedCall extends ethereum.Call {
  get inputs(): AllInitialOwnersAssignedCall__Inputs {
    return new AllInitialOwnersAssignedCall__Inputs(this);
  }

  get outputs(): AllInitialOwnersAssignedCall__Outputs {
    return new AllInitialOwnersAssignedCall__Outputs(this);
  }
}

export class AllInitialOwnersAssignedCall__Inputs {
  _call: AllInitialOwnersAssignedCall;

  constructor(call: AllInitialOwnersAssignedCall) {
    this._call = call;
  }
}

export class AllInitialOwnersAssignedCall__Outputs {
  _call: AllInitialOwnersAssignedCall;

  constructor(call: AllInitialOwnersAssignedCall) {
    this._call = call;
  }
}

export class BuyLRECall extends ethereum.Call {
  get inputs(): BuyLRECall__Inputs {
    return new BuyLRECall__Inputs(this);
  }

  get outputs(): BuyLRECall__Outputs {
    return new BuyLRECall__Outputs(this);
  }
}

export class BuyLRECall__Inputs {
  _call: BuyLRECall;

  constructor(call: BuyLRECall) {
    this._call = call;
  }

  get LREIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyLRECall__Outputs {
  _call: BuyLRECall;

  constructor(call: BuyLRECall) {
    this._call = call;
  }
}

export class TransferLRECall extends ethereum.Call {
  get inputs(): TransferLRECall__Inputs {
    return new TransferLRECall__Inputs(this);
  }

  get outputs(): TransferLRECall__Outputs {
    return new TransferLRECall__Outputs(this);
  }
}

export class TransferLRECall__Inputs {
  _call: TransferLRECall;

  constructor(call: TransferLRECall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get LREIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferLRECall__Outputs {
  _call: TransferLRECall;

  constructor(call: TransferLRECall) {
    this._call = call;
  }
}

export class WithdrawBidForLRECall extends ethereum.Call {
  get inputs(): WithdrawBidForLRECall__Inputs {
    return new WithdrawBidForLRECall__Inputs(this);
  }

  get outputs(): WithdrawBidForLRECall__Outputs {
    return new WithdrawBidForLRECall__Outputs(this);
  }
}

export class WithdrawBidForLRECall__Inputs {
  _call: WithdrawBidForLRECall;

  constructor(call: WithdrawBidForLRECall) {
    this._call = call;
  }

  get LREIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawBidForLRECall__Outputs {
  _call: WithdrawBidForLRECall;

  constructor(call: WithdrawBidForLRECall) {
    this._call = call;
  }
}

export class SetInitialOwnerCall extends ethereum.Call {
  get inputs(): SetInitialOwnerCall__Inputs {
    return new SetInitialOwnerCall__Inputs(this);
  }

  get outputs(): SetInitialOwnerCall__Outputs {
    return new SetInitialOwnerCall__Outputs(this);
  }
}

export class SetInitialOwnerCall__Inputs {
  _call: SetInitialOwnerCall;

  constructor(call: SetInitialOwnerCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get LREIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetInitialOwnerCall__Outputs {
  _call: SetInitialOwnerCall;

  constructor(call: SetInitialOwnerCall) {
    this._call = call;
  }
}

export class OfferLREForSaleToAddressCall extends ethereum.Call {
  get inputs(): OfferLREForSaleToAddressCall__Inputs {
    return new OfferLREForSaleToAddressCall__Inputs(this);
  }

  get outputs(): OfferLREForSaleToAddressCall__Outputs {
    return new OfferLREForSaleToAddressCall__Outputs(this);
  }
}

export class OfferLREForSaleToAddressCall__Inputs {
  _call: OfferLREForSaleToAddressCall;

  constructor(call: OfferLREForSaleToAddressCall) {
    this._call = call;
  }

  get LREIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minSalePriceInWei(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get toAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class OfferLREForSaleToAddressCall__Outputs {
  _call: OfferLREForSaleToAddressCall;

  constructor(call: OfferLREForSaleToAddressCall) {
    this._call = call;
  }
}

export class OfferLREForSaleCall extends ethereum.Call {
  get inputs(): OfferLREForSaleCall__Inputs {
    return new OfferLREForSaleCall__Inputs(this);
  }

  get outputs(): OfferLREForSaleCall__Outputs {
    return new OfferLREForSaleCall__Outputs(this);
  }
}

export class OfferLREForSaleCall__Inputs {
  _call: OfferLREForSaleCall;

  constructor(call: OfferLREForSaleCall) {
    this._call = call;
  }

  get LREIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minSalePriceInWei(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OfferLREForSaleCall__Outputs {
  _call: OfferLREForSaleCall;

  constructor(call: OfferLREForSaleCall) {
    this._call = call;
  }
}

export class GetLRECall extends ethereum.Call {
  get inputs(): GetLRECall__Inputs {
    return new GetLRECall__Inputs(this);
  }

  get outputs(): GetLRECall__Outputs {
    return new GetLRECall__Outputs(this);
  }
}

export class GetLRECall__Inputs {
  _call: GetLRECall;

  constructor(call: GetLRECall) {
    this._call = call;
  }

  get LREIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetLRECall__Outputs {
  _call: GetLRECall;

  constructor(call: GetLRECall) {
    this._call = call;
  }
}

export class LRENoLongerForSaleCall extends ethereum.Call {
  get inputs(): LRENoLongerForSaleCall__Inputs {
    return new LRENoLongerForSaleCall__Inputs(this);
  }

  get outputs(): LRENoLongerForSaleCall__Outputs {
    return new LRENoLongerForSaleCall__Outputs(this);
  }
}

export class LRENoLongerForSaleCall__Inputs {
  _call: LRENoLongerForSaleCall;

  constructor(call: LRENoLongerForSaleCall) {
    this._call = call;
  }

  get LREIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LRENoLongerForSaleCall__Outputs {
  _call: LRENoLongerForSaleCall;

  constructor(call: LRENoLongerForSaleCall) {
    this._call = call;
  }
}
