type Assign @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  LREIndex: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LRETransfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  LREIndex: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LREOffered @entity(immutable: true) {
  id: Bytes!
  LREIndex: BigInt! # uint256
  minValue: BigInt! # uint256
  toAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LREBidEntered @entity(immutable: true) {
  id: Bytes!
  LREIndex: BigInt! # uint256
  value: BigInt! # uint256
  fromAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LREBidWithdrawn @entity(immutable: true) {
  id: Bytes!
  LREIndex: BigInt! # uint256
  value: BigInt! # uint256
  fromAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LREBought @entity(immutable: true) {
  id: Bytes!
  LREIndex: BigInt! # uint256
  value: BigInt! # uint256
  fromAddress: Bytes! # address
  toAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LRENoLongerForSale @entity(immutable: true) {
  id: Bytes!
  LREIndex: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}